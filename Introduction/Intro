A Graph is a non-linear data structure consisting of vertices and edges. 
The vertices are sometimes also referred to as nodes and 
the edges are lines or arcs that connect any two nodes in the graph. 
More formally a Graph is composed of a set of vertices( V ) and 
a set of edges( E ). The graph is denoted by G(E, V).

Types Of Graph
1. Null Graph
A graph is known as a null graph if there are no edges in the graph.

2. Trivial Graph
Graph having only a single vertex, it is also the smallest graph possible.

3. Undirected Graph
A graph in which edges do not have any direction. 
That is the nodes are unordered pairs in the definition of every edge. 

4. Directed Graph
A graph in which edge has direction. 
That is the nodes are ordered pairs in the definition of every edge.

5. Connected Graph
The graph in which from one node we can visit any other node 
in the graph is known as a connected graph. 

6. Disconnected Graph
The graph in which at least one node is not reachable from a node 
is known as a disconnected graph.

7. Regular Graph
The graph in which the degree of every vertex 
is equal to the other vertices of the graph. 
Let the degree of each vertex be K then the graph

8. Complete Graph
The graph in which from each node there is an edge to each other node.

9. Cycle Graph
The graph in which the graph is a cycle in itself, the degree of each vertex is 2.
10. Cyclic Graph
A graph containing at least one cycle is known as a Cyclic graph.

11. Directed Acyclic Graph
A Directed Graph that does not contain any cycle. 
12. Bipartite Graph
A graph in which vertex can be divided into two sets 
such that vertex in each set does not contain any edge between them.

13. Weighted Graph
A graph in which the edges are already specified with suitable weight 
is known as a weighted graph. 
Weighted graphs can be further classified as directed weighted graphs and 
undirected weighted graphs. 
-------------------------------------------------------------------------------------------------

Representation of Graphs
There are two ways to store a graph:
1. Adjacency Matrix
2. Adjacency List

Adjacency Matrix
In this method, the graph is stored in the form of the 2D matrix 
where rows and columns denote vertices.
Each entry in the matrix represents the weight of the edge between those vertices. 

Adjacency List
This graph is represented as a collection of linked lists. 
There is an array of pointer which points to the edges connected to that vertex. 

Usage of graphs
1. Maps can be represented using graphs and then can be used 
by computers to provide various services like the shortest path between two cities.
2. When various tasks depend on each other 
then this situation can be represented using a Directed Acyclic graph and 
we can find the order in which tasks can be performed using topological sort.
3. State Transition Diagram represents what can be the legal moves from current states. 
In-game of tic tac toe this can be used.

--------------------------------------------------------------------------------------------------
